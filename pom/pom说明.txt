<scope>
dependency中scope类型。默认值compile
1.compile：表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去
2.test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit
3.runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段
4.provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作
5.system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径


<type>
dependency中type用来定义依赖的类型，类型有：pom，jar，bar，war。默认值是jar。当type=pom时，必须scope=import。


<optional>
控制依赖: 当值为true的时候,说明该依赖是只是一个可选依赖.该依赖只能在本项目中传递,不会传递到引用该项目的父项目中，父项目需要主动引用该依赖才行。
    例:表示当前项目A依赖B,但是依赖项目A的父项目不会主动依赖B
    <dependencies>
        <dependency>
          <groupId>sample.ProjectB</groupId>
          <artifactId>Project-B</artifactId>
          <version>1.0</version>
          <scope>compile</scope>
          <optional>true</optional>
        </dependency>
    </dependencies>


<exclusion>
控制依赖: 排除依赖,不依赖传过来的某些关联依赖.
    例:表示当前项目依赖项目A但是排除依赖项目A传过来的依赖B
    <dependency>
          <groupId>sample.ProjectA</groupId>
          <artifactId>Project-A</artifactId>
          <version>1.0</version>
          <scope>compile</scope>
          <exclusions>
            <exclusion>
              <groupId>sample.ProjectB</groupId>
              <artifactId>Project-B</artifactId>
            </exclusion>
          </exclusions>
    </dependency>
