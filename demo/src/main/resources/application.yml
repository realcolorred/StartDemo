spring:
  application:
    name: demo

server:
  port: 8801

eureka:
  instance:
    prefer-ip-address: true #服务注册在eureka的地址选择是 ip-address 还是 hostname
    ip-address: 127.0.0.1 #服务ip地址
    hostname: ${spring.application.name} #配置在hosts里面的域名，或实际的域名
    instance-id: ${eureka.instance.ip-address}:${server.port} #服务注册在eureka的名称
  client:
    enabled: true
    serviceUrl.defaultZone: http://127.0.0.1:8701/eureka/ #eureka服务端地址，多个地址之间用逗号隔开
    registry-fetch-interval-seconds: 5 #每隔2秒从服务端获取最新的注册信息,如果获取超时，第二次获取时间会翻倍
    register.with.eureka: true #是否注册到eureka
    fetch.registry: true # 从eureka获取其他服务的注册信息
    instance-info-replication-interval-seconds: 5 #每隔5秒扫描一次本地实例，如果有变化向服务重新注册

stu-provide:
  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置规则 随机
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重
    ConnectTimeout: 500 #请求连接超时时间
    ReadTimeout: 1000 #请求处理的超时时间
    OkToRetryOnAllOperations: true #对所有请求都进行重试
    MaxAutoRetriesNextServer: 2 #切换实例的重试次数
    MaxAutoRetries: 1 #对当前实例的重试次数


jdbc:
  company:
    driver-class-name: com.mysql.jdbc.Driver
    jdbc-url: jdbc:mysql://localhost:3306/fgo?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  home:
    driver-class-name: com.mysql.jdbc.Driver
    jdbc-url: jdbc:mysql://localhost:3306/home?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root

com.neo:
  title: 2333
  description: 233333

spring.http.encoding:
  force: true
  enabled: true
  charset: UTF-8

server.tomcat.uri-encoding: UTF-8

logging.config: classpath:logback-spring.xml

spring.thymeleaf.prefix: classpath:/page/

